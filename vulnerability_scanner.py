import os 
from tqdm import tqdm
from utils import print_message
from report_generator import generate_pdf_report

def scan_vulnerabilities(targets, open_ports_dict):
    """
    Escanea vulnerabilidades en una o varias IPs con opciones de potencia (baja, media, alta).

    :param targets: Lista de direcciones IP a escanear.
    :param open_ports_dict: Diccionario con IPs como claves y listas de puertos abiertos como valores.
    """
    if not open_ports_dict or all(len(ports) == 0 for ports in open_ports_dict.values()):
        print_message("No hay puertos abiertos para escanear.", "red", attrs=["bold"])
        return
    
    if isinstance(targets, str):
        targets = [targets]
    
    report_name = "red_vuln_report" if len(targets) > 1 else targets[0]
    print_message(f"Escaneando vulnerabilidades para {'la red' if len(targets) > 1 else targets[0]}...", "green", attrs=["bold"])
    
    open_ports = sorted(set(port for ports in open_ports_dict.values() for port in ports))
    if not open_ports:
        print_message(f"No hay puertos abiertos en {', '.join(targets)}. No se realizará el escaneo de vulnerabilidades.", "yellow")
        return
    
    generate_report = input("¿Desea generar un reporte de vulnerabilidades? [s/n]: ").strip().lower()
    
    print("\nSeleccione la potencia del escaneo de vulnerabilidades:")
    print("[1] Baja (rápido, menos exhaustivo)")
    print("[2] Media (equilibrado)")
    print("[3] Alta (lento, más exhaustivo)")
    choice = input("Ingrese el número de la opción [1-3]: ").strip()
    
    nmap_options = "-sV -sC --script=vuln,auth,broadcast-upnp-info,snmp-info,http-title -T3 --max-retries 1 -Pn"
    
    if choice == "1":
        nmap_options = "-sV --script=vuln,http-title -T4 --min-rate=1000 --max-retries 1 -Pn"
    elif choice == "2":
        nmap_options = "-sV -sC --script=vuln,auth,snmp-info,http-title -T3 --min-rate=500 --max-retries 2 -Pn"
    elif choice == "3":
        nmap_options = "-sV -sC --script=vuln,auth,broadcast-upnp-info,snmp-info,http-title -T2 --min-rate=100 --max-retries 3 -Pn --data-length 32"
    else:
        print_message("Opción no válida. Usando modo MEDIA por defecto.", "red")
    
    targets_str = " ".join(targets)
    ports_str = ",".join(map(str, open_ports))
    
    if generate_report == "s":
        xml_path = f"./reports/{report_name}.xml"
        command = f"nmap {nmap_options} {targets_str} -p {ports_str} -oX {xml_path}"
    else:
        command = f"nmap {nmap_options} {targets_str} -p {ports_str}"  # No guardar output
    
    print_message(f"Ejecutando: {command}", "blue")
    
    with tqdm(total=1, desc="Escaneando", unit="scan", ncols=80, bar_format="{l_bar}{bar}{r_bar}", colour="green") as pbar:
        os.system(command)
        pbar.update(1)
    
    if generate_report == "s":
        if not os.path.exists(xml_path):
            print_message(f"Error: No se pudo generar el archivo XML para {'la red' if len(targets) > 1 else targets[0]}", "red", attrs=["bold"])
            return
        generate_pdf_report(xml_path)
    
    print_message("Escaneo completado.", "green")
